#ifndef __{NAME-UPPERCASE}_H__
#define __{NAME-UPPERCASE}_H__

#include <glib.h>
#include <glib-object.h>

#define {PREFIX-UPPERCASE}_{NAME-UPPERCASE}_TYPE ({PREFIX-LOWERCASE}_{NAME}_get_type())
#define {PREFIX-UPPERCASE}_{NAME-UPPERCASE}(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), {PREFIX-UPPERCASE}_{NAME-UPPERCASE}_TYPE, {PREFIX-CAMELIZE}{NAME-CAMELIZE}))
#define {PREFIX-UPPERCASE}_{NAME-UPPERCASE}_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST((klass), {PREFIX-UPPERCASE}_{NAME-UPPERCASE}_TYPE, {PREFIX-CAMELIZE}{NAME-CAMELIZE}Class))
#define {PREFIX-UPPERCASE}_IS_{NAME-UPPERCASE}(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), {PREFIX-UPPERCASE}_{NAME-UPPERCASE}_TYPE))
#define {PREFIX-UPPERCASE}_IS_{NAME-UPPERCASE}_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE((klass), {PREFIX-UPPERCASE}_{NAME-UPPERCASE}_TYPE))
#define {PREFIX-UPPERCASE}_{NAME-UPPERCASE}_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), {PREFIX-UPPERCASE}_{NAME-UPPERCASE}_TYPE, {PREFIX-CAMELIZE}{NAME-CAMELIZE}Class))

typedef struct _{PREFIX-CAMELIZE}{NAME-CAMELIZE} {PREFIX-CAMELIZE}{NAME-CAMELIZE};
typedef struct _{PREFIX-CAMELIZE}{NAME-CAMELIZE}Class {PREFIX-CAMELIZE}{NAME-CAMELIZE}Class;

struct _{PREFIX-CAMELIZE}{NAME-CAMELIZE}
{
    GObject parent;
};

struct _{PREFIX-CAMELIZE}{NAME-CAMELIZE}Class
{
    GObjectClass parent_class;
};

GType {PREFIX-LOWERCASE}_{NAME}_get_type(void);

#endif /* __{NAME-UPPERCASE}_H__ */
